swagger: "2.0"
info:
  title: API for Usman Rabbani Enterprise
  description: This is the documentation of cable shop
  version: 1.0
  contact:
    email: rehmanwaqas393@gmail.com
  servers:
    -url: "https://localhost:4500/"
  description: This is my local server
schemes: [http, https]

tags:
  - name: User
    description: Operations about User
  - name: Product
    description: Access our Cable Store for orders
#Defining Body Reference

paths:
# SignUp API
  /api/signup:
    post:
      tags: 
        - User
      summary: Adds a new user
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: Sign Up your account
          schema:
            $ref: "#/components/schemas/User"
      required: true
      responses:
        '201':
          description: User Created Successfully
        '400':
          description: User Already Exist
        '422':
          description: Required Field Missing  
# Login API
  /api/login:
    post:
      tags: 
        - User
      summary: User Login into the System
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: Login your Account
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email: 
                type: string
                example: johndoe@gmail.com
              password:
                type: string
                example: hello123                
      responses:
        '201':
          description: Successfully Login
        '400':
          description: Incorrect email or Password
        '404':
          description: User not  found
        '500':
          description: Server error occurred
# Forget Password API          
  /api/forget-password:
    post:
      tags: 
        - User
      summary: Forget your password
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: change or Forget Your Password
          schema:
            type: object
            required:
              - email
            properties:
              email: 
                type: string
                example: johndoe@gmail.com                
      responses:
        '200':
          description: Request Send Successfully
        '404':
          description: User not  found
# Password Update API
  /api//update-pass:
    put:
      tags: 
        - User
      summary: Update your password
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: Update Your Password
          schema:
            type: object
            required:
              - tokenId
              - password
            properties:
              token: 
                type: string
              password:
                type: string
                example: add new password               
      responses:
        '200':
          description: Request Send Successfully
        '404':
          description: User not  found
# Product Search API
  /api/products:
    get:
      tags: 
        - Product
      summary: Search products
      parameters:
        - name: productName
          in: query
          description: Name of the product to search for
          required: false
          schema:
            type: string
        - name: core
          in: query
          description: Core information of the product
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  found_records:
                    type: integer
# Add Product API
  /api/addProduct:
    post:
      tags: 
        - Product
      summary: Add a new product
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: Add Product
          schema:
            $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Bad request, all fields are required
# Sell Product API
  /api/sellProduct:
    post:
      tags: 
        - Product
      summary: Sell a product
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: Create Sell Record
          schema:
            $ref: '#/components/schemas/SellProductInput'
      responses:
        '201':
          description: Sales record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesRecord'
        '400':
          description: Bad request, all fields are required
        '404':
          description: Product not found
# Update Product API
  /api/updateProduct:
    put:
      tags: 
        - Product
      summary: Update product information
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: Update Product
          schema:
            $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product information updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
# Delete Product API
  /api/deleteProduct:
    delete:
      tags: 
        - Product
      summary: Delete a product
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: Delete Product
          schema:
            type: object
            properties:
              _id:
                type: string
      responses:
        '201':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found

components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          example: john
        email:
          type: string
          example: john@doe.com
        phone_no:
          type: string
          example: 0300-0000000
        password:
          type: string
          example: hello123
    Product:
      type: object
      properties:
        _id:
          type: string
        productName:
          type: string
        productLength:
          type: number
        unitPrice:
          type: number
        core:
          type: string
    ProductInput:
      type: object
      properties:
        productName:
          type: string
        productLength:
          type: number
        unitPrice:
          type: number
        core:
          type: string
    ProductResponse:
      type: object
      properties:
        message:
          type: string
        product:
          $ref: '#/components/schemas/Product'
    SellProductInput:
      type: object
      properties:
        product:
          type: string
        quantitySold:
          type: number
        unitPrice:
          type: number
        customerName:
          type: string
        customerNo:
          type: number
    SalesRecord:
      type: object
      properties:
        message:
          type: string
        salesRecord:
          $ref: '#/components/schemas/SalesRecord'
